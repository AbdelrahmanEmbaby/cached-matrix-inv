l=append(l,F)
}
}
}
while(i<=length(c)){
for(x in g){
if(x == c[i]){
l=append(l,T)
i++
}else{
l=append(l,F)
}
}
}
while(i<=length(c)){
for(x in g){
if(x == c[i]){
l=append(l,T)
i++
else{
l=append(l,F)
}
}
}
while(i<=length(c))
for(x in g)
if(x == c[i])
l=append(l,T)
i++
else
l=append(l,F)
length(c)
i=1;
while(i<=length(c)){
for(x in g){
if(x == c[i]){
l=append(l,T)
i++
}else{
l=append(l,F)
}
}
}
rm(list = ls())
a<-c(1:10)
b<-c(5:14)
c=intersect(a,b)
g=c(a[!a %in% c],c,b[!b %in% c])
g
l=c()
i=1;
while (i<=lenghth(c)) {
for(x in g){
if(x==c[i]){
append(l,T)
i++
}
else{
append(l,F)
}
}
}
while (i<=lenghth(c)) {
for(x in g){
if(x==c[i]){
append(l,T)
i++
}
else{
append(l,F)
}
}
}
rm(list = ls())
a=matrix(c(1,1,3,5,2,6,-2,-1,-3),nrow = 3,byrow = T)
a
if(a%*%a%*%a == matrix(c(rep(0,9))),nrow=3){}
if(a%*%a%*%a == matrix(c(rep(0,9))),nrow=3){
if(a%*%a%*%a == matrix(c(rep(0,9)),nrow=3)){
print("True")
}else{}
if(a%*%a%*%a == matrix(c(rep(0,9)),nrow=3)){
print("True")
}else{
print("False")}
a%*%a%*%a
a%*%a%*%a == matrix(c(rep(0,9)),nrow = 3)
b=a%*%a%*%a
b
c<-matrix(c(rep(0,9),nrow=3))
vc
c
c<-matrix(c(rep(0,9)),nrow = 3)
c
b==c
if(b==c)print(T)
for(i in 10:100){
sum = sum + (i^3+4*i^2)
}
sum=0
for(i in 10:100){
sum = sum + (i^3+4*i^2)
}
sum
sum(i^3+4*i^2,c(10:100))
rm(list =ls())
sum(i^3+4*i^2,i=c(10:100))
i=c(10:100)
sum(i^3+4*i^2,i)
sum=0
for(i in 10:100){
sum = sum + (i^3+4*i^2)
}
sum
sum=0
for(i in 10:100){
sum = sum + (i^3+4*i^2)
}
sum
i=c(10:100)
sum(i^3+4*i^2,i)
i=c(10:99)
sum(i^3+4*i^2,i)
i=c(10:100)
rm(list =ls())
sum=0
for(i in 1:25){
sum = sum + (2^i/i)
}
sum
sum=1
while(i<=39){
sum = sum + (i/(++i))
}
sum
sum=1
while(i<39){
sum = sum + (i/(++i))
}
sum
sum=1
i=2
while(i<39){
sum = sum + (i/(++i))
}
sum
rm(list =ls())
sum=1
i=2
while(i<39){
sum = sum + (i/(++i))
}
sum
sum=1
i=2
while(i<39){
sum = sum + (i/(++i))
}
sum
sum=1
i=2
while(i<39){
sum = sum + (i/(i+1))
i=i+1
}
sum
m = matrix(c(1,2,3,4,5,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,5,4,3,2,1),nrow = 5,byrow = T)
m
rm(list =ls())
a = matrix(c(1,2,3,4,5,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,5,4,3,2,1),nrow = 5,byrow = T)
a
solve(a,y)
y=c(7,-1,-3,5,17)
solve(a,y)
rm(list =ls())
Height = c(160,174,172,161,175,181,180)
Weight = c(110,86,75,75,71,91,85)
Gender = c("f","f","m","f","m","m","m")
Human.body = data.frame(Height,Weight,Gender)
Human.body
Human.body.copy = Human.body
Human.body.copy$Gender[7]="f"
Human.body.copy
Age = c(1,2,3,4,5,6,7)
append(Human.body.copy,age)
append(Human.body.copy,Age)
rm(list =ls())
Height = c(160,174,172,161,175,181,180)
Weight = c(110,86,75,75,71,91,85)
Gender = c("f","f","m","f","m","m","m")
Human.body = data.frame(Height,Weight,Gender)
Human.body
Human.body.copy = Human.body
Human.body.copy$Gender[7]="f"
Human.body.copy
Age = c(1,2,3,4,5,6,7)
append(Human.body.copy,t(Age))
rm(list =ls())
Human.body.copy$Age
Height = c(160,174,172,161,175,181,180)
Weight = c(110,86,75,75,71,91,85)
Gender = c("f","f","m","f","m","m","m")
Human.body = data.frame(Height,Weight,Gender)
Human.body
Human.body.copy = Human.body
Human.body.copy$Gender[7]="f"
Human.body.copy
Age = c(1,2,3,4,5,6,7)
Human.body.copy$Age
Human.body.copy$Age = Age
Human.body.copy
txtdata=data.frame(readLines(choose))
txtdata=data.frame(readLines(file.choose()))
txtdata=data.frame(readLines("test.txt"))
txtdata=data.frame(read.csv("temp.csv")
txtdata=data.frame(read.csv("temp.csv"))
txtdata=data.frame(read.csv("temp.csv"))
Human.body.copy$[2]
Human.body.copy[,2]
Human.body$Human.body.copy[,4]
Human.body$Human.body.copy[,3]
Human.body$Age = Human.body.copy[,4]
Human.body
rm(ls())
rm(list = ls())
summary(trees)
quantile(trees$Volume)
quantile(trees$Volume,0.5)
trees$Volume[c((length(trees$Volume)/2)+1,(length(trees$Volume)/2)-1)]
trees
trees$Volume[c((length(trees$Volume)/2)+1,(length(trees$Volume)/2))]
mean(trees$Height)
max(sd(trees))
max(sd(trees$c(,1:3)))
max(sd(trees$Girth))
max(sd(trees$Height))
max(sd(trees$Volume))
sd(trees$Height)
sd(trees$Volume)
sd(trees$Girth)
)
min(trees$Girth
)
min(trees$Girth
max(trees$Girth)
min(trees$Girth)
quartile(volume,0.1)
quartile(trees$volume,0.1)
quartile(trees$volume,c(0.1:1))
quantile(trees$volume,c(0.1:1))
quantile(trees$volume,c(seq(0.1,1,0.1)))
trees$volume
trees$Volume
quantile(trees$Volume,c(seq(0.1,1,0.1)))
boxplot(trees)
range(trees$Volume)
IQR(trees$Volume)
x=c(-4:4)
x
plot(4*x^2+2*x+5)
plot(4*x^2+2*x+5,type = 'l')
plot(4*x^2+2*x+5,type = )
plot(4*x^2+2*x+5,type = 'lm')
plot(4*x^2+2*x+5,type = 'l')
plot(4*x^2+2*x+5,type = 'c')
plot(4*x^2+2*x+5,type = 'a')
plot(4*x^2+2*x+5,type = 'f')
plot(4*x^2+2*x+5,type = 'p')
plot(4*x^2+2*x+5,type = 'l')
plot(4*x^2+2*x+5,type = 'b')
plot(4*x^2+2*x+5,type = 'c')
plot(4*x^2+2*x+5,type = 'o')
plot(4*x^2+2*x+5,type = 'h')
plot(4*x^2+2*x+5,type = 's')
plot(4*x^2+2*x+5,type = 'S')
plot(4*x^2+2*x+5,type = 's')
plot(4*x^2+2*x+5,type = 'n')
plot(4*x^2+2*x+5,type = 'l')
plot(4*x^2+2*x+5,type = 'l',col = y)
plot(4*x^2+2*x+5,type = 'l',col = 'y')
plot(4*x^2+2*x+5,type = 'l',col = "y")
plot(4*x^2+2*x+5,type = 'l',ylab = "y")
plot(4*x^2+2*x+5,type = 'l',ylab = "y",xlab = "x")
quantile(airquality$Temp,c(seq(0.1,0.9,0.1)))
quantile(airquality$Wind,c(0.5,.45,.67))
quantile(airquality$Wind,c(0.35,.45,.67))
1-dbinom(3,7,0.6)
1-pbinom(3,7,0.6)
1-pbinom(4,7,0.6)
sample(1:40,20,replace =T)
x=seq(-4,4,0.1)
plot(x,dnorm(x),type = 'l')
plot(x,dnorm(x),type = "l")
x=seq(-4,4,0.1)
plot(x,dnorm(x),type = "l")
x=seq(-4,4,0.1)
plot(x,dnorm(x),type = "l")
rm(list=ls())
rnorm(100)
rexp(100)
1-pnorm(3)
1-pnorm(42,35,6)
qbinom(10,10,0.8)
qbinom()
dbinom(10,10,0.8)
pbinom(0.9)
punif(0.9)
dunif(0.9)
1-pchisq(6.5,2)
sample(c('H','T'),10,replace = T,c(0.3,0.7))
1-pnorm(1.644)
qexp(0.75,0.5)
pbinom(7,3,0.4)
dbinom(7,3,0.6)
dbinom(,0.6)
dbinom(3,7,0.6)
pbinom(5,7,0.6)
1-pbinom(5,7,0.6)
1-pbinom(5,7,0.6)+dbinom(5,7,0.6)
rexp(20,0.25)
pnorm(469,400,50)-pnorm(360,400,50)
pnorm(600,400,50)
1-pnorm(600,500,50)
dbinom(5,400,0.2)
sample(c(0,1,2,3),100,c(1/8,3/8,3/8,1/8),replace = T)
plot(sample(c(0,1,2,3),100,c(1/8,3/8,3/8,1/8),replace = T))
plot(ecdf(sample(c(0,1,2,3),100,c(1/8,3/8,3/8,1/8),replace = T)))
x=sample(c(0,1,2,3),100,c(1/8,3/8,3/8,1/8),replace = T)
xplot(ecdf())
plot(ecdf(x))
ecdf(x)
rm(list=ls())
factorial(4)
perm = function(int n,int r){
factorial(r)*factorial(n-r)
}
perm = function(m,r){
factorial(r)*factorial(n-r)
}
perm = function(n,r){
factorial(r)*factorial(n-r)
}
perm = function(int n,int r){
factorial(r)*factorial(n-r)
}
rm(list=ls())
perm = function(n,r){
factorial(r)*factorial(n-r)
}
perm(10,3)
perm = function(n,r){
factorial(r)/factorial(n-r)
}
perm(10,3)
perm = function(n,r){
factorial(n)/factorial(n-r)
}
perm(10,3)
choose(7,5)
perm(7,5)/factorial(5)
#this function return the permutation between two numbers
perm1 = function(n,r){
factorial(n)/factorial(n-r)
}
rm(list=ls())
#also you can create permutation function using the built-in compination function
perm2 = function(n,r){
choose(n,r)*factorial(r)
}
rm(list=ls())
#this function return the permutation between two numbers
perm1 = function(n,r){
factorial(n)/factorial(n-r)
}
perm1(10,3)
#also you can create permutation function using the built-in compination function
perm2 = function(n,r){
choose(n,r)*factorial(r)
}
perm2(10,3)
#but the first one is more optimum
f1=function(x){1/5*exp(-x/5)}
integrate(f1,10,Inf)
integrate(f1,10,Inf)$value
integrate(f1,0,5)
integrate(f1,0,5)$value
integrate(f1,5,10)$value
mean = function(x){x*f1(x)}
integrate(mean,0,5)$value
rm(list=ls())
rm(list=ls())
#this function return the permutation between two numbers
perm1 = function(n,r){
factorial(n)/factorial(n-r)
}
perm1(10,3)
#also you can create permutation function using the built-in compination function
perm2 = function(n,r){
choose(n,r)*factorial(r)
}
perm2(10,3)
#but the first one is more optimum
#-------------------------------------------------------------------------------
#it is easy to create a function using function built-in as following
#function name = function(function variable){your function}
f1=function(x){1/5*exp(-x/5)}
#to get probability of a certain range we need to integrate our function using lower and upper bounds
#that can be done using the built-in function integrate as following
#integrate(the function you created, lower-bound, upper-bound)
integrate(f1,10,Inf)$value
#using $value will return the value of the integration without the error
integrate(f1,0,5)$value
integrate(f1,5,10)$value
#we can also use the integrate function to get the mean of our range
#as mean is the integration of "x*f(x)" where f(x) is a function given in the question
mean = function(x){x*f1(x)}
integrate(mean,0,5)$value
#using the same way of getting the mean we can get the variance also
#as variance is the integration of "x^2*f(x)" then we subtract the mean square
f2 = function(x){x^2*f1(x)}
variance = integrate(f2,0,5)$value - (integrate(mean,0,5)$value)^2
variance
rm(list=ls())
is.na(x)
x=c(1,2,NA,3)
is.na(x)
pmin(c(1,2,3,4),c(5,7,9,12))
pmin(c(1,20,5,100),c(2,50,30,80))
sum(complete.cases(c(1,2,NA,4)))
x=3.5
y=x (int)
trunc(x)
seq(5,2)
rnorm(100)
rexp(100)
pnorm(3)
1-pnorm(3)
1-pnorm(42,35,6)
qbinom(10,10,0.8)
qbinom(0.8)
qbinom(10,0.8)
dbinom(10,10,0.8)
punif(0.9)
1-pchisq(6.5,1/2)
sample(c("H","T"),10,c(0.3,0.7))
sample(c("H","T"),10,,c(0.3,0.7))
sample(c("H","T"),10,prob = c(0.3,0.7))
sample(c("H","T"),10,T,c(0.3,0.7))
qexp(0.75)
qexp(0.75,0.5)
dbinom(3,7,0.6)
pbinom(5,7,0.6)
dbinom(5,7,0.6)+1-pbinom(5,7,0.6)
-dbinom(5,7,0.6)+1-pbinom(5,7,0.6)
1-pbinom(5,7,0.6)-dbinom(5,7,0.6)
1-pbinom(5,7,0.6)+dbinom(5,7,0.6)
rexp(20,0.25)
sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))
plot(ecdf(sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))))
plot(ecdf(sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))))
plot(ecdf(sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))))
plot(ecdf(sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))))
plot(ecdf(sample(c(0,1,2,3),100,T,c(1/8,3/8,3/8,1/8))))
rm(list=ls())
x=c(14,14.1,14.5,13.2,11.2,14,14.1,12.2,11.1,13.7,13.2,16,12.8,14.4,12.9)
t.test(x,12,0.05)
t.test(x,12)
help(t.test)
t.test(x,mu = 12,conf.level = 0.05)
rm(list=ls())
x=c(18,21,28,35,47,33,40,41,28,21,30,46,44,38,19)
y=c(38,40,49,54,66,52,57,62,47,39,49,65,65,56,38)
reg = lm(y~x)
summary(reg)
xdata = data.frame(x=50)
predict(reg,data = xdata)
xdata
predict(reg)
predict(reg,newdata = xdata)
resid(reg)
plot(fits(reg),resid(reg))
plot(fit(reg),resid(reg))
plot(fitted(reg),resid(reg))
abline(reg)
plot(x,y)
abline(reg)
rm(list=ls())
x=(edit(data.frame()))
x
aov(x)
result = aov(treatment~response,data = x)
result
summary(result)
sum(x$treatment)/15
model.tables(result,"means")
boxplot(result)
boxplot(treatment~response,data = x)
model.tables(result)
x=(edit(data.frame()))
x=(fix(data.frame()))
fix(x)
View(x)
View(x)
x=(edit(data.frame()))
result = aov(responce~treatment,data = x)
result = aov(response~treatment,data = x)
result
summary(result)
model.tables(result,"means")
model.tables(result)
boxplot(treatment~response,data = x)
boxplot(response~treatment,data = x)
